<!DOCTYPE html>
<html translate="no" data-dpr="1">
   <head>
      <meta charset="utf-8" />
      <meta http-equiv="X-UA-Compatible" content="IE=edge" />
      <meta name="robots" content="noindex,nofollow" />
      <meta content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no" name="viewport" />
      <title>Real Cash - Deposit</title>
      <!-- Font Awesome -->
      <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
      <!-- Axios for API calls -->
      <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.7/axios.min.js" integrity="sha512-NQfB/bDaB8kaSXF8E77JjhHG5PM6XVRxvHzkZiwl3ddWCEPBa23T76MuWSwAJdMGJnmQqM0VeY9kFszsrBEFrQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
      <!-- Favicon -->
      <link rel="shortcut icon" href="/images/bitbug_favicon.ico" type="image/x-icon" />

      <!-- Inline Styles - Corrected -->
      <style>
      /* --- Basic Reset & Body --- */
      * {
          margin: 0;
          padding: 0;
          box-sizing: border-box;
      }
     
      html {
          font-size: 16px; /* Base font size */
          /* Prevent font size inflation on mobile */
          text-size-adjust: 100%;
          -webkit-text-size-adjust: 100%;
          -moz-text-size-adjust: 100%;
      }
     
      body {
          font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
          background-color: #f0f2f5; /* Light background for outside the app */
          color: #333;
          line-height: 1.5;
          font-size: 1rem;
          margin: 0; /* Ensure no default body margin */
      }
     
      #app.recharge-page {
          max-width: 900px; /* Max width for larger screens */
          min-width: 320px; /* Minimum reasonable width */
          margin: 0 auto; /* Center on larger screens */
          background-color: #ffffff; /* White background for the app container */
          min-height: 100vh;
          display: flex;
          flex-direction: column;
          overflow-x: hidden; /* Prevent horizontal scroll */
      }
     
      /* --- Header --- */
      .main-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          background-color: #2c3e50;
          color: #fff;
          padding: 0.7rem 1rem; /* Slightly reduced padding */
          flex-shrink: 0; /* Prevent header from shrinking */
      }
     
      .header-logo {
          height: 30px; /* Slightly smaller logo */
          display: block;
          object-fit: contain;
      }
     
      .header-right {
          display: flex;
          align-items: center;
          gap: 0.6rem; /* Reduced gap */
      }
     
      .deposit-balance-btn {
          background-color: #f39c12;
          color: #fff;
          border: none;
          padding: 0.4rem 0.8rem; /* Adjusted padding */
          border-radius: 20px;
          font-weight: bold;
          cursor: pointer;
          display: flex;
          align-items: center;
          gap: 0.3rem; /* Reduced gap */
          font-size: clamp(0.8rem, 2.5vw, 0.9rem); /* Responsive font size */
          white-space: nowrap;
          line-height: 1.3; /* Adjust line height */
      }
     
      .deposit-balance-btn i {
          font-size: clamp(0.9rem, 3vw, 1rem); /* Responsive icon size */
      }
     
      .menu-btn {
          background: none;
          border: none;
          color: #fff;
          font-size: clamp(1.3rem, 5vw, 1.5rem); /* Responsive icon size */
          cursor: pointer;
          padding: 0.2rem; /* Add slight padding for easier tap */
      }
     
      /* --- Tabs --- */
      .page-tabs {
          display: flex;
          background-color: #fff;
          border-bottom: 1px solid #eee;
          flex-shrink: 0; /* Prevent tabs from shrinking */
      }
     
      .tab-item {
          flex: 1;
          text-align: center;
          padding: 0.8rem 0.5rem; /* Allow horizontal padding */
          text-decoration: none;
          color: #555;
          font-weight: bold;
          position: relative;
          transition: color 0.3s ease;
          font-size: clamp(0.9rem, 3vw, 1rem); /* Responsive font size */
          white-space: nowrap;
      }
     
      .tab-item.active {
          color: #3498db;
      }
     
      .tab-item.active::after {
          content: '';
          position: absolute;
          bottom: 0;
          left: 10%; /* Indent underline slightly */
          width: 80%; /* Make underline slightly narrower */
          height: 3px;
          background-color: #3498db;
      }
     
      /* --- UPI Section --- */
      .upi-section {
          padding: 1.5rem 1rem;
          background-color: #fff;
          border: 1px solid #f39c12;
          margin: 1rem;
          border-radius: 8px;
          display: flex;
          justify-content: center;
          align-items: center;
          flex-shrink: 0;
      }
     
      .upi-section img {
          max-width: clamp(120px, 40vw, 150px); /* Responsive max width */
          height: auto;
      }
     
      /* --- Recharge Form Section --- */
      .recharge-form-section {
          background-color: #0d1a3a;
          color: #fff;
          padding: 1.5rem 1rem;
          margin: 0 1rem 1rem 1rem;
          border-radius: 8px;
          flex-grow: 1; /* Allow this section to take remaining space */
          display: flex;
          flex-direction: column;
      }
     
      .minimum-recharge {
          font-size: clamp(0.85rem, 2.8vw, 0.9rem); /* Responsive font size */
          color: #bdc3c7;
          margin-bottom: 1.5rem;
          text-align: center;
          font-weight: 500;
          flex-shrink: 0;
      }
     
      /* --- Amount Input Group (Improved Responsiveness) --- */
      .amount-input-group {
          display: flex;
          align-items: stretch; /* Make items fill height */
          margin-bottom: 1.5rem;
          border-radius: 8px;
          overflow: hidden;
          border: 1px solid #4a5568;
          background-color: #fff;
          flex-shrink: 0; /* Prevent shrinking weirdly */
      }
     
      .amount-input {
          flex-grow: 1; /* Allow input to take most space */
          flex-basis: 50%; /* Suggest a starting width */
          padding: 0.8rem 0.8rem; /* Adjust padding */
          border: none;
          font-size: clamp(1rem, 3.5vw, 1.1rem);
          color: #333;
          min-width: 60px; /* Allow shrinking but not too much */
          outline: none;
          background-color: transparent;
          border-radius: 8px 0 0 8px;
          -moz-appearance: textfield;
          appearance: textfield;
          height: auto;
      }
      .amount-input::-webkit-outer-spin-button,
      .amount-input::-webkit-inner-spin-button {
          -webkit-appearance: none;
          margin: 0;
      }
     
      .currency-symbol {
          padding: 0 0.8rem; /* Adjust padding */
          font-weight: bold;
          color: #999;
          background-color: #fff;
          display: flex;
          align-items: center;
          border-left: 1px solid #e2e8f0;
          border-right: 1px solid #e2e8f0;
          flex-shrink: 0; /* Don't shrink symbol */
          font-size: clamp(0.8rem, 2.5vw, 0.9rem);
      }
     
      .deposit-action-btn {
          background-color: #e67e22;
          color: #fff;
          border: none;
          padding: 0.8rem clamp(0.8rem, 3vw, 1.5rem); /* Responsive padding */
          font-weight: bold;
          cursor: pointer;
          font-size: clamp(0.9rem, 3vw, 1rem);
          white-space: nowrap;
          transition: background-color 0.3s ease;
          border-radius: 0 8px 8px 0;
          display: flex;
          align-items: center;
          flex-shrink: 0; /* Don't shrink button text area */
      }
      .deposit-action-btn:hover {
          background-color: #d35400;
      }
     
      /* --- Preset Amounts (Improved Responsiveness) --- */
      .preset-amounts {
          display: grid; /* Use Grid for more control */
          grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); /* Responsive columns */
          gap: 0.8rem;
          margin-bottom: 1.5rem;
          width: 100%; /* Ensure it takes full width */
      }
     
      .preset-amount-btn {
          /* width removed, grid handles it */
          background-color: #2c3e50;
          color: #ecf0f1;
          border: none;
          padding: 0.8rem 0.5rem; /* Adjust padding */
          border-radius: 8px;
          cursor: pointer;
          font-size: clamp(0.9rem, 3vw, 1rem); /* Responsive font */
          font-weight: 500;
          text-align: center;
          transition: background-color 0.3s ease, color 0.3s ease;
          line-height: 1.3; /* Ensure text fits */
          word-break: keep-all; /* Prevent breaking numbers */
          white-space: nowrap; /* Keep number on one line */
      }
     
      .preset-amount-btn.active {
          background-color: #3498db;
          color: #fff;
          font-weight: bold;
      }
     
      .preset-amount-btn:hover:not(.active) {
          background-color: #34495e;
      }
     
      /* --- Selected Amount Display --- */
      .selected-amount-display {
          text-align: center;
          font-size: clamp(1rem, 3.5vw, 1.1rem); /* Responsive font size */
          color: #f39c12;
          font-weight: bold;
          margin-top: auto; /* Push to bottom if space available */
          padding-top: 1rem; /* Add some space above */
          flex-shrink: 0;
      }
     
      /* --- Footer --- */
      .main-footer {
          background-color: #1f2b40;
          padding: 1.5rem 1rem;
          text-align: center;
         /* margin-top: auto; removed, form section handles growth */
          flex-shrink: 0; /* Prevent footer shrinking */
      }
     
      .footer-logo {
          height: 35px; /* Adjusted size */
          margin-bottom: 1rem;
          object-fit: contain;
      }
     
      .social-icons {
          display: flex;
          justify-content: center;
          flex-wrap: wrap; /* Allow wrapping on small screens */
          gap: 1.2rem; /* Adjusted gap */
      }
     
      .social-icons a {
          color: #7f8c8d;
          font-size: 1.3rem; /* Slightly smaller icons */
          text-decoration: none;
          transition: color 0.3s ease;
      }
     
      .social-icons a:hover {
          color: #bdc3c7;
      }
     
     
      /* --- Previous Payment Popup Styles --- */
      .previous_payment_background {
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background-color: rgba(0, 0, 0, 0.6);
          display: flex; /* Keep using flex */
          justify-content: center;
          align-items: center;
          z-index: 1000;
          padding: 1rem; /* Add padding for small screens */
          /* display: none; */ /* Controlled by JS */
      }
     
      .previous_payment_popup {
          background-color: #fff;
          padding: clamp(1.5rem, 5vw, 2rem); /* Responsive padding */
          border-radius: 8px;
          text-align: center;
          max-width: 400px; /* Limit max width */
          width: 100%; /* Take available width */
          color: #333;
      }
      .previous_payment_popup_message {
         margin-bottom: 1.5rem;
         line-height: 1.4;
         font-size: clamp(0.9rem, 3vw, 1rem);
      }
      .previous_payment_popup button {
         display: block;
         width: 100%;
         padding: 0.8rem;
         margin-bottom: 0.8rem;
         border: none;
         border-radius: 5px;
         cursor: pointer;
         font-weight: bold;
         font-size: clamp(0.9rem, 3vw, 1rem);
      }
      .previous_payment_popup .pay_now {
         background-color: #2ecc71;
         color: white;
      }
      .previous_payment_popup .cancel_payment {
         background-color: #e74c3c;
         color: white;
      }
      .previous_payment_popup button:last-child {
          margin-bottom: 0;
      }
      @media (max-width: 740) {
         #app.recharge-page {
          max-width: 600px; /* Max width for larger screens */
          min-width: 720px; /* Minimum reasonable width */
          margin: 0 auto; /* Center on larger screens */
          background-color: #ffffff; /* White background for the app container */
          min-height: 100vh;
          display: flex;
          flex-direction: column;
          overflow-x: hidden; /* Prevent horizontal scroll */
      }
   }
      /* Add specific small screen adjustments if needed */
      @media (max-width: 360px) {
         #app.recharge-page {
          max-width: 600px; /* Max width for larger screens */
          min-width: 320px; /* Minimum reasonable width */
          margin: 0 auto; /* Center on larger screens */
          background-color: #ffffff; /* White background for the app container */
          min-height: 100vh;
          display: flex;
          flex-direction: column;
          overflow-x: hidden; /* Prevent horizontal scroll */
      }
     
         
         .preset-amount-btn {
             font-size: 0.85rem; /* Further reduce font */
             padding: 0.7rem 0.4rem;
         }
         .deposit-action-btn {
             font-size: 0.85rem;
             padding: 0.8rem 0.6rem; /* Further reduce padding */
         }
         .currency-symbol {
             padding: 0 0.6rem;
             font-size: 0.75rem;
         }
         .amount-input {
             font-size: 0.9rem;
             padding: 0.8rem 0.6rem;
         }
         .page-tabs {
             /* Optional: Allow tabs to scroll if they don't fit */
             /* overflow-x: auto; */
             /* justify-content: flex-start; */
         }
         .tab-item {
             /* flex-grow: 0; */ /* If scrolling */
             /* padding: 0.8rem 1rem; */ /* If scrolling */
         }
      }
      </style>
   </head>

   <body>
      <div id="app" class="recharge-page">
         <!-- New Header -->
         <header class="main-header">
            <div class="header-left">
               <!-- IMPORTANT: Update logo path -->
               <img src="/images/banners/logo.png" alt="Aviator Logo" class="header-logo" />
            </div>
            <div class="header-right">
               <button class="deposit-balance-btn">
                  <i class="fa-solid fa-wallet"></i>
                  ₹<span id="balance-display">0.00</span> DEPOSIT <!-- Added space -->
               </button>
               
            </div>
         </header>

         <!-- Tabs -->
         <nav class="page-tabs">
            <a href="/recharge" class="tab-item active">DEPOSIT</a>
            <!-- IMPORTANT: Update withdraw link if needed -->
            <a href="/wallet/withdrawal" class="tab-item">WITHDRAW</a>
         </nav>

         <!-- UPI Section -->
         <section class="upi-section">
             <!-- IMPORTANT: Update UPI logo path -->
            <img src="/images/upi.png" alt="UPI Logo" />
         </section>

         <!-- Recharge Form Section -->
         <section class="recharge-form-section">
            <p class="minimum-recharge">MINIMUM RECHARGE: <span id="min-recharge-amount">500</span></p>

            <div class="amount-input-group">
               <input type="number" id="amount-input" placeholder="500+" value="1000" class="amount-input" inputmode="numeric"/>
               <span class="currency-symbol">INR</span>
               <button id="deposit-button" class="deposit-action-btn">DEPOSIT</button>
            </div>

            <div class="preset-amounts" id="preset-amounts-container">
               <button class="preset-amount-btn" data-amount="500">500</button>
               <button class="preset-amount-btn active" data-amount="1000">1000</button>
               <button class="preset-amount-btn" data-amount="2000">2000</button>
               <button class="preset-amount-btn" data-amount="5000">5000</button>
               <button class="preset-amount-btn" data-amount="10000">10000</button>
               <button class="preset-amount-btn" data-amount="20000">20000</button>
               <button class="preset-amount-btn" data-amount="50000">50000</button>
               <button class="preset-amount-btn" data-amount="95000">95000</button>
            </div>

            <p class="selected-amount-display">Recharge Amount Select: ₹<span id="selected-amount-value">1000</span></p>
         </section>

         <!-- Footer -->
         <footer class="main-footer">
             <!-- IMPORTANT: Update footer logo path -->
            <img src="/images/banners/logo.png" alt="Aviator Logo" class="footer-logo" />
            <div class="social-icons">
               <a href="#" aria-label="Facebook"><i class="fab fa-facebook-f"></i></a>
               <a href="#" aria-label="Telegram"><i class="fab fa-telegram-plane"></i></a>
               <a href="#" aria-label="Youtube"><i class="fab fa-youtube"></i></a>
               <a href="#" aria-label="Instagram"><i class="fab fa-instagram"></i></a>
               <a href="#" aria-label="Twitter"><i class="fab fa-twitter"></i></a>
            </div>
         </footer>

         <!-- Keep the previous payment popup if needed -->
         <div class="previous_payment_background" id="previous_payment_popup" style="display: none;"> <!-- Initially hidden -->
            <div class="previous_payment_popup">
               <h3 class="previous_payment_popup_message">You have a pending payment left. What do you want to do?</h3>
               <button class="pay_now" id="pay_now">Pay Now</button>
               <button class="cancel_payment" id="cancel_payment">Cancel and Create New Deposit</button>
            </div>
         </div>
      </div>
      

      <!-- Keep jQuery if your client.js or other scripts depend on it -->
      <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

      <!-- JavaScript Logic -->
      <script>
         // --- DOM Elements ---
         const balanceDisplay = document.getElementById('balance-display');
         const amountInput = document.getElementById('amount-input');
         const depositButton = document.getElementById('deposit-button');
         const presetAmountsContainer = document.getElementById('preset-amounts-container');
         const presetAmountButtons = presetAmountsContainer.querySelectorAll('.preset-amount-btn');
         const selectedAmountValue = document.getElementById('selected-amount-value');
         const minimumRechargeSpan = document.getElementById('min-recharge-amount');

         // --- Configuration ---
         // IMPORTANT: Set your actual minimum or fetch it from backend if dynamic
         let minimumMoneyAllowed = 500;
         // You might want to fetch this value from the backend if it changes
         // Example: minimumMoneyAllowed = parseInt('<%= MinimumMoney || 500 %>');

         let currentAmount = 1000; // Default amount

         // --- Functions ---

         // Basic alert function (replace with a nicer modal if you have one)
         const alertMessage = text => {
            alert(text);
         };

         // Function to update balance display
         const updateTotalBalance = async () => {
             balanceDisplay.textContent = "Loading...";
             try {
                 const response = await axios.get("/api/webapi/GetUserInfo"); // Ensure this endpoint is correct
                 const user = response?.data?.data;
                 const balance = user?.money_user ?? 0;
                 balanceDisplay.textContent = parseFloat(balance).toFixed(2); // Format to 2 decimal places
             } catch (error) {
                 console.error("Error fetching balance:", error);
                 balanceDisplay.textContent = "Error";
                 // Optional: Show an alert to the user
                 // alertMessage("Could not update balance. Please try again later.");
             }
         };

         // Function to update UI based on selected amount
         const updateSelectedAmount = (amount) => {
            const numericAmount = parseInt(amount, 10);

            // If input is invalid or empty, reflect that but don't necessarily default to 0 for display
            if (isNaN(numericAmount) || amount === '') {
                currentAmount = 0; // Set internal value for validation
                amountInput.value = amount; // Keep user input as is
                selectedAmountValue.textContent = '0'; // Show 0 in the display text
            } else {
                currentAmount = numericAmount;
                amountInput.value = currentAmount; // Update input field to normalized number
                selectedAmountValue.textContent = currentAmount; // Update display text
            }


            // Update active state for preset buttons
            presetAmountButtons.forEach(btn => {
               if (parseInt(btn.dataset.amount, 10) === currentAmount) {
                  btn.classList.add('active');
               } else {
                  btn.classList.remove('active');
               }
            });
         };

         // Function to handle deposit action
         const handleDeposit = async () => {
             // Re-parse the amount from input just before deposit for safety
             const finalAmount = parseInt(amountInput.value, 10);

             if (isNaN(finalAmount) || finalAmount < minimumMoneyAllowed) {
                 alertMessage(`Minimum deposit amount is ₹${minimumMoneyAllowed}. Please enter a valid amount.`);
                 amountInput.focus(); // Focus the input field
                 return;
             }

             // **IMPORTANT**: Confirm this is the correct function for your main UPI flow.
             // If your backend uses a different endpoint/method for the main UPI button shown,
             // call that specific function instead (e.g., handleUPIGatewayPaymentRequest).
             console.log(`Initiating deposit for ₹${finalAmount} via Manual UPI`);
             // Disable button temporarily? Add loading state?
             depositButton.disabled = true;
             depositButton.textContent = 'Processing...';
             try {
                 await handleManualUPIPaymentRequest(finalAmount);
                 // Redirect happens in the function below, so no need to re-enable here
             } catch (error) {
                 // Re-enable button if the request function itself throws an error
                 console.error("Deposit initiation failed:", error);
                 alertMessage("Could not start the deposit process. Please try again.");
                 depositButton.disabled = false;
                 depositButton.textContent = 'DEPOSIT';
             }

         };

         // --- Backend Interaction Functions ---

         // Manual UPI Request (Redirects user)
         const handleManualUPIPaymentRequest = async (moneyAmount) => {
            // Redirect to the page that handles manual UPI details/QR code etc.
            // Ensure this URL is correct for your application.
            window.location.href = `/wallet/paynow/manual_upi?am=${moneyAmount}`;
            // Note: Execution stops here due to redirect. Error handling for the redirect itself is limited.
         };

         // Optional: UPI Gateway Request (Example - Keep if you have another UPI option)
         const handleUPIGatewayPaymentRequest = async (moneyAmount) => {
             console.log(`Initiating deposit for ₹${moneyAmount} via UPI Gateway`);
             depositButton.disabled = true;
             depositButton.textContent = 'Redirecting...';
             try {
                 const response = await axios.post("/wallet/paynow/upi", { money: moneyAmount }); // Ensure endpoint is correct
                 const data = response?.data;

                 if (!data) throw new Error("Empty response from server.");

                 if (data.status === false) {
                     alertMessage(data.message || "Deposit request failed via gateway.");
                     depositButton.disabled = false; // Re-enable on failure
                     depositButton.textContent = 'DEPOSIT';
                     return;
                 }

                 if (data?.urls?.web_url) {
                     window.location.href = data.urls.web_url; // Redirect to payment gateway
                 } else {
                     alertMessage("Payment URL not found in response.");
                     depositButton.disabled = false; // Re-enable if URL missing
                     depositButton.textContent = 'DEPOSIT';
                 }
             } catch (error) {
                 console.error("UPI Gateway Error:", error);
                 alertMessage("An error occurred while initiating the gateway deposit.");
                 depositButton.disabled = false; // Re-enable on error
                 depositButton.textContent = 'DEPOSIT';
             }
         };


         // --- Event Listeners ---

         // Preset amount button clicks
         presetAmountButtons.forEach(button => {
            button.addEventListener('click', (event) => {
               // Prevent default button behavior if any
               event.preventDefault();
               updateSelectedAmount(button.dataset.amount);
            });
         });

         // Manual amount input change/blur
         amountInput.addEventListener('input', () => {
             // Update display immediately as user types
             updateSelectedAmount(amountInput.value);
         });
          amountInput.addEventListener('blur', () => {
             // Normalize the value when focus is lost
             updateSelectedAmount(amountInput.value);
         });


         // Deposit button click
         depositButton.addEventListener('click', (event) => {
             event.preventDefault(); // Prevent default form submission if it's inside a form
             handleDeposit();
         });

         // --- Initial Setup ---
         document.addEventListener('DOMContentLoaded', () => {
            // Set minimum amount text and input placeholder
            minimumRechargeSpan.textContent = minimumMoneyAllowed;
            amountInput.placeholder = `₹${minimumMoneyAllowed}+`; // Set placeholder dynamically

            updateSelectedAmount(currentAmount); // Set initial state (e.g., for 1000)
            updateTotalBalance(); // Fetch and display balance on load

            // Optional: Add listener for balance refresh if you have a refresh button
            // document.getElementById('reload-balance-btn')?.addEventListener('click', updateTotalBalance);

            // Optional: Check for pending payments (Add your logic here if needed)
            // checkForPendingPayment();
         });

      </script>
   </body>
</html>